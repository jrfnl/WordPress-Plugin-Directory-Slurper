#!/usr/bin/php
<?php
$args = $argv;
$cmd  = array_shift( $args );
$type = 'all';

if ( ! empty( $args[0] ) )
	$type = $args[0];

switch ( $type ) {

	case 'readme':
		$directory = 'readmes';
		$download  = 'readmes/%s.txt';
		$url       = 'https://plugins.svn.wordpress.org/%s/trunk/readme.txt';
		break;

	case 'all':
		$directory = 'plugins';
		$download  = 'zips/%s.zip';
		$url       = 'https://downloads.wordpress.org/plugin/%s.latest-stable.zip?nostats=1';
		break;

	default:
		echo $cmd . ": invalid command\r\n";
		echo 'Usage: php ' . $cmd . " [command]\r\n\r\n";
		echo "Available commands:\r\n";
		echo "  all - Downloads full plugin zips\r\n";
		echo "  readme - Downloads plugin readmes only\r\n";
		die();
}

echo "Determining most recent SVN revision...\r\n";

try {
	$changelog = @file_get_contents( 'https://plugins.trac.wordpress.org/log/?format=changelog&stop_rev=HEAD' );

	if ( ! $changelog )
		throw new Exception( 'Could not fetch the SVN changelog' );

	preg_match( '#\[([0-9]+)\]#', $changelog, $matches );

	if ( ! $matches[1] )
		throw new Exception( 'Could not determine most recent revision.' );

} catch ( Exception $e ) {

	die( $e->getMessage() . "\r\n" );
}

$svn_last_revision = (int) $matches[1];

echo 'Most recent SVN revision: ' . $svn_last_revision . "\r\n";

if ( file_exists( $directory . '/.last-revision' ) ) {

	$last_revision = (int) file_get_contents( $directory . '/.last-revision' );
	echo 'Last synced revision: ' . $last_revision . "\r\n";
}
else {

	$last_revision = false;
	echo "You have not yet performed a successful sync. Settle in. This will take a while.\r\n";
}

$start_time = time();

if ( $last_revision != $svn_last_revision ) {

	if ( $last_revision ) {
		$changelog_url = sprintf( 'https://plugins.trac.wordpress.org/log/?verbose=on&mode=follow_copy&format=changelog&rev=%d&limit=%d', $svn_last_revision, $svn_last_revision - $last_revision );
		$changes       = file_get_contents( $changelog_url );
		preg_match_all( '#^' . "\t" . '*\* ([^/A-Z ]+)[ /].* \((added|modified|deleted|moved|copied)\)' . "\n" . '#m', $changes, $matches );
		$plugins = array_unique( $matches[1] );
	}
	else {

		$plugins = file_get_contents( 'https://plugins.svn.wordpress.org/' );
		preg_match_all( '#<li><a href="([^/]+)/">([^/]+)/</a></li>#', $plugins, $matches );
		$plugins = $matches[1];
	}

	foreach ( $plugins as $plugin ) {

		$plugin = urldecode( $plugin );
		echo 'Updating ' . $plugin;

		$ch   = curl_init();
		$path = sprintf( $download, $plugin );
		$file = fopen( $path, 'w' );
		curl_setopt( $ch, CURLOPT_URL, sprintf( $url, $plugin ) );
		curl_setopt( $ch, CURLOPT_FILE, $file );
		curl_exec( $ch );
		$errno = curl_errno( $ch );
		curl_close( $ch );
		fclose( $file );

		if ( 0 === $errno && file_exists( $path ) ) {

			if ( 'all' === $type ) {

				if ( file_exists( 'plugins/' . $plugin ) )
					delete( 'plugins/' . $plugin );

				$zip = new ZipArchive;

				if ( true === $zip->open( $path ) ) {

					$zip->extractTo( 'plugins' );
					$zip->close();
				}
				else {
					echo '... extract failed';
				}

				unlink( $path );
			}
		}
		else {

			echo '... download failed.';
		}

		echo "\r\n";
	}

	if ( file_put_contents( $directory . '/.last-revision', $svn_last_revision ) )
		echo "[CLEANUP] Updated $directory/.last-revision to " . $svn_last_revision . "\r\n";
	else
		echo "[ERROR] Could not update $directory/.last-revision to " . $svn_last_revision . "\r\n";
}

$end_time = time();
$minutes  = ( $end_time - $start_time ) / 60;
$seconds  = ( $end_time - $start_time ) % 60;

echo "[SUCCESS] Done updating plugins!\r\n";
echo 'It took ' . number_format( $minutes ) . ' minute' . ( $minutes == 1 ? '' : 's' ) . ' and ' . $seconds . ' second' . ( $seconds == 1 ? '' : 's' ) . ' to update ' . count( $plugins ) . ' plugin' . ( count( $plugins ) == 1 ? '' : 's' ) . "\r\n";
echo "[DONE]\r\n";

/**
 * Delete file/directory recursively. Based on WP_Filesystem_Direct->delete() because GPL.
 *
 * @param string $file
 *
 * @return bool
 */
function delete( $file ) {

	if ( empty( $file ) ) //Some filesystems report this as /, which can cause non-expected recursive deletion of all files in the filesystem.
		return false;

	$file = str_replace( '\\', '/', $file ); //for win32, occasional problems deleting files otherwise

	if ( is_file( $file ) )
		return unlink( $file );

	//At this point its a folder, and we're in recursive mode
	$filelist = glob( $file . '/*', GLOB_MARK );
	$retval   = true;

	foreach ( $filelist as $filename ) {

		if ( ! delete( $filename ) )
			$retval = false;
	}

	if ( file_exists( $file ) && ! rmdir( $file ) )
		$retval = false;

	return $retval;
}